class ServiceWorkerManager{constructor(){this.registration=null,this.isOnline=navigator.onLine,this.updateAvailable=!1,this.init()}async init(){if("serviceWorker"in navigator)try{await this.registerServiceWorker(),this.setupUpdateHandling(),this.setupOnlineOfflineHandling(),this.setupBackgroundSync(),this.setupPushNotifications()}catch(e){console.error("Service Worker initialization failed:",e)}else console.log("Service Worker not supported")}async registerServiceWorker(){try{this.registration=await navigator.serviceWorker.register("/sw.js",{scope:"/"}),console.log("Service Worker registered successfully:",this.registration),this.registration.installing?(console.log("Service Worker installing..."),this.trackInstallProgress(this.registration.installing)):this.registration.waiting?(console.log("Service Worker waiting..."),this.showUpdateAvailable()):this.registration.active&&console.log("Service Worker active"),this.registration.addEventListener("updatefound",()=>{console.log("Service Worker update found"),this.trackInstallProgress(this.registration.installing)})}catch(e){throw console.error("Service Worker registration failed:",e),e}}trackInstallProgress(e){e.addEventListener("statechange",()=>{switch(console.log("Service Worker state changed:",e.state),e.state){case"installed":navigator.serviceWorker.controller?this.showUpdateAvailable():this.showInstallComplete();break;case"activated":console.log("Service Worker activated"),this.showActivated();break;case"redundant":console.log("Service Worker redundant")}})}setupUpdateHandling(){navigator.serviceWorker.addEventListener("message",e=>{this.handleServiceWorkerMessage(e)}),setInterval(()=>{this.registration&&this.registration.update()},6e4)}handleServiceWorkerMessage(e){const{type:t,data:i}=e.data;switch(t){case"trade-synced":this.handleTradeSynced(i);break;case"watchlist-synced":this.handleWatchlistSynced(i);break;case"cache-updated":this.handleCacheUpdated(i);break;case"offline-ready":this.handleOfflineReady()}}setupOnlineOfflineHandling(){window.addEventListener("online",()=>{this.isOnline=!0,this.handleOnline()}),window.addEventListener("offline",()=>{this.isOnline=!1,this.handleOffline()}),this.isOnline?this.handleOnline():this.handleOffline()}handleOnline(){console.log("Application is online"),document.body.classList.remove("offline"),document.body.classList.add("online"),this.showNotification("Back online","Connection restored","success"),this.triggerBackgroundSync(),this.updateCaches()}handleOffline(){console.log("Application is offline"),document.body.classList.remove("online"),document.body.classList.add("offline"),this.showNotification("Offline mode","Some features may be limited","warning"),this.enableOfflineFeatures()}setupBackgroundSync(){"serviceWorker"in navigator&&"sync"in window.ServiceWorkerRegistration.prototype?(console.log("Background Sync supported"),this.registerBackgroundSync("background-sync-trades"),this.registerBackgroundSync("background-sync-watchlist")):console.log("Background Sync not supported")}async registerBackgroundSync(e){try{this.registration&&this.registration.sync&&(await this.registration.sync.register(e),console.log("Background sync registered:",e))}catch(e){console.error("Background sync registration failed:",e)}}triggerBackgroundSync(){this.registerBackgroundSync("background-sync-trades"),this.registerBackgroundSync("background-sync-watchlist")}setupPushNotifications(){"PushManager"in window&&"Notification"in window?(console.log("Push notifications supported"),this.requestNotificationPermission()):console.log("Push notifications not supported")}async requestNotificationPermission(){if("default"===Notification.permission){const e=await Notification.requestPermission();console.log("Notification permission:",e),"granted"===e&&this.subscribeToPushNotifications()}else"granted"===Notification.permission&&this.subscribeToPushNotifications()}async subscribeToPushNotifications(){try{if(this.registration&&this.registration.pushManager){const e=await this.registration.pushManager.subscribe({userVisibleOnly:!0,applicationServerKey:this.urlBase64ToUint8Array(this.getVapidPublicKey())});console.log("Push subscription:",e),await this.sendSubscriptionToServer(e)}}catch(e){console.error("Push subscription failed:",e)}}getVapidPublicKey(){return"BEl62iUYgUivxIkv69yViEuiBIa40HI0DLLuxazjqAKHSr3txbueJHHieurqDFt0NdNiS5PhzSA6jZxaZYTBBDM"}urlBase64ToUint8Array(e){const t=(e+"=".repeat((4-e.length%4)%4)).replace(/-/g,"+").replace(/_/g,"/"),i=window.atob(t),s=new Uint8Array(i.length);for(let e=0;e<i.length;++e)s[e]=i.charCodeAt(e);return s}async sendSubscriptionToServer(e){try{(await fetch("/api/push-subscription",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)})).ok&&console.log("Push subscription sent to server")}catch(e){console.error("Failed to send subscription to server:",e)}}showUpdateAvailable(){this.updateAvailable=!0;const e=this.createUpdateNotification();document.body.appendChild(e)}createUpdateNotification(){const e=document.createElement("div");return e.className="update-notification",e.innerHTML='\n            <div class="update-content">\n                <div class="update-icon">\n                    <i class="fas fa-download"></i>\n                </div>\n                <div class="update-text">\n                    <h4>Update Available</h4>\n                    <p>A new version of SuperStock is ready to install.</p>\n                </div>\n                <div class="update-actions">\n                    <button class="btn btn-primary btn-sm" onclick="window.swManager.applyUpdate()">\n                        Update Now\n                    </button>\n                    <button class="btn btn-outline-secondary btn-sm" onclick="window.swManager.dismissUpdate()">\n                        Later\n                    </button>\n                </div>\n            </div>\n        ',e}async applyUpdate(){this.registration&&this.registration.waiting&&(this.registration.waiting.postMessage({type:"SKIP_WAITING"}),window.location.reload())}dismissUpdate(){const e=document.querySelector(".update-notification");e&&e.remove()}showInstallComplete(){this.showNotification("App Installed","SuperStock is now available offline","success")}showActivated(){this.showNotification("App Updated","SuperStock has been updated to the latest version","success")}enableOfflineFeatures(){this.showOfflineIndicators(),this.enableOfflineStorage(),this.setupOfflineFormHandling()}showOfflineIndicators(){document.querySelectorAll("button, .btn").forEach(e=>{e.classList.contains("offline-available")||(e.classList.add("offline-disabled"),e.title="This feature requires an internet connection")})}enableOfflineStorage(){this.setupOfflineDatabase()}async setupOfflineDatabase(){return new Promise((e,t)=>{const i=indexedDB.open("SuperStockOffline",1);i.onerror=()=>t(i.error),i.onsuccess=()=>e(i.result),i.onupgradeneeded=e=>{const t=e.target.result;t.objectStoreNames.contains("trades")||t.createObjectStore("trades",{keyPath:"id",autoIncrement:!0}),t.objectStoreNames.contains("watchlist")||t.createObjectStore("watchlist",{keyPath:"id",autoIncrement:!0}),t.objectStoreNames.contains("portfolio")||t.createObjectStore("portfolio",{keyPath:"symbol"})}})}setupOfflineFormHandling(){document.addEventListener("submit",e=>{this.isOnline||this.handleOfflineFormSubmission(e)})}handleOfflineFormSubmission(e){e.preventDefault();const t=e.target,i=new FormData(t),s=Object.fromEntries(i.entries());this.storeOfflineFormData(t.action,s),this.showNotification("Saved for later","Your request will be processed when you're back online","info")}async storeOfflineFormData(e,t){try{const i=await this.setupOfflineDatabase(),s=i.transaction(["trades"],"readwrite").objectStore("trades");await s.add({action:e,data:t,timestamp:Date.now(),synced:!1}),console.log("Offline form data stored")}catch(e){console.error("Failed to store offline form data:",e)}}async updateCaches(){this.registration&&this.registration.active?.postMessage({type:"CACHE_URLS",urls:this.getCriticalUrls()})}getCriticalUrls(){return["/","/Home/Index","/Home/Leaderboard","/css/site.min.css","/js/site.min.js","/js/dashboard.min.js"]}async clearCaches(){this.registration&&this.registration.active?.postMessage({type:"CLEAR_CACHE"})}handleTradeSynced(e){console.log("Trade synced:",e),e.success&&(this.showNotification("Trade Executed","Your offline trade has been processed","success"),window.dashboard&&window.dashboard.refreshPortfolio())}handleWatchlistSynced(e){console.log("Watchlist synced:",e),e.success&&(this.showNotification("Watchlist Updated","Your offline watchlist changes have been synced","success"),window.watchlist&&window.watchlist.refresh())}handleCacheUpdated(e){console.log("Cache updated:",e)}handleOfflineReady(){this.showNotification("Offline Ready","SuperStock is now available offline","success")}showNotification(e,t,i="info",s=5e3){const n=document.createElement("div");n.className=`sw-notification sw-notification-${i}`,n.innerHTML=`\n            <div class="sw-notification-content">\n                <div class="sw-notification-icon">\n                    <i class="fas fa-${this.getNotificationIcon(i)}"></i>\n                </div>\n                <div class="sw-notification-text">\n                    <h5>${e}</h5>\n                    <p>${t}</p>\n                </div>\n                <button class="sw-notification-close" onclick="this.parentElement.parentElement.remove()">\n                    <i class="fas fa-times"></i>\n                </button>\n            </div>\n        `,document.body.appendChild(n),setTimeout(()=>n.classList.add("show"),100),setTimeout(()=>{n.classList.add("hide"),setTimeout(()=>n.remove(),300)},s)}getNotificationIcon(e){const t={success:"check-circle",error:"exclamation-circle",warning:"exclamation-triangle",info:"info-circle"};return t[e]||t.info}getRegistration(){return this.registration}isAppOnline(){return this.isOnline}isUpdateAvailable(){return this.updateAvailable}async checkForUpdates(){this.registration&&await this.registration.update()}async getOfflineData(e){try{const t=await this.setupOfflineDatabase(),i=t.transaction([e],"readonly").objectStore(e);return new Promise((e,t)=>{const s=i.getAll();s.onsuccess=()=>e(s.result),s.onerror=()=>t(s.error)})}catch(e){return console.error("Failed to get offline data:",e),[]}}async clearOfflineData(e){try{const t=await this.setupOfflineDatabase(),i=t.transaction([e],"readwrite").objectStore(e);return new Promise((e,t)=>{const s=i.clear();s.onsuccess=()=>e(),s.onerror=()=>t(s.error)})}catch(e){console.error("Failed to clear offline data:",e)}}}document.addEventListener("DOMContentLoaded",()=>{window.swManager=new ServiceWorkerManager,console.log("Service Worker Manager initialized")}),window.ServiceWorkerManager=ServiceWorkerManager;